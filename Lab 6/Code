#include<stdio.h>
#include<stdlib.h>
struct node
{
  int data;
  struct node *next;
};

struct node *head;

void begin_insert();
void begin_delete();
void last_delete();
void random_delete();
void display();

void main()
{
    int choice =0;
    while(1)
    {
        printf("\nChoose an option: ");
        printf("\n1.Insert in the beginning\n2.Delete in the beginning\n3.Delete at last\n4.Delete at random\n5.Display\n6.Exit ");
        printf("\nEnter choice: ");
        scanf("%d",&choice);
        switch(choice)
        {
            case 1: begin_insert(); break;
            case 2: begin_delete(); break;
            case 3: last_delete(); break;
            case 4: random_delete(); break;
            case 5: display(); break;
            case 6: exit(0);
        }

    }
}

void begin_insert(){
    int new_data;
    struct node *new = (struct node*) malloc(sizeof(struct node));
    printf("\nEnter data: ");
    scanf("%d", &new_data);
    new->data = new_data;
    new->next = head;
    head = new;
}

void begin_delete(){
    struct node *ptr;
    if(head==NULL)
    {
        printf("Empty list");
    }
    else
    {
        ptr = head;
        head = ptr->next;
        free(ptr);
    }
}

void last_delete()
{
    struct node *ptr, *ptr1;
    if(head==NULL)
    {
        printf("Empty list");
    }
    else if(head->next == NULL)
    {
        head = NULL;
        free(head);
    }
    else
    {
        ptr = head;
        while(ptr->next != NULL)
        {
            ptr1 = ptr;
            ptr = ptr -> next;
        }
        ptr1 -> next = NULL;
        free(ptr);
    }
}

void random_delete()
{
    struct node *ptr, *ptr1;
    int loc, i;
    printf("\nEnter location: ");
    scanf("%d", &loc);
    ptr=head;
    for(i=0;i<loc;i++)
    {
        ptr1 = ptr;
        ptr=ptr->next;
    }
    if(ptr==NULL)
    {
        printf("\nCannot delete");
        return;
    }
    ptr1->next = ptr ->next;
    free(ptr);
    printf("\nDeleted node %d", loc+1);

}

void display()
{
    struct node *ptr;
    ptr = head;
    if(ptr == NULL)
    {
        printf("Empty List");
    }
    else
    {
        printf("List is: \n");
        while(ptr!=NULL)
        {
            printf("\n %d", ptr->data);
            ptr = ptr->next;
        }
    }
}
